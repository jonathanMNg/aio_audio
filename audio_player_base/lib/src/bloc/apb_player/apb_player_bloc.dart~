import 'dart:async';
import 'package:audio_player_base/src/model/audio_model.dart';
import 'package:audio_player_base/src/player/audio_player_handler.dart';
import 'package:audio_player_base/src/repository/src/audio_provider.dart';
import 'package:audio_player_base/src/repository/src/playlist_provider.dart';
import 'package:flutter/foundation.dart';
import 'package:equatable/equatable.dart';
import 'package:hydrated_bloc/hydrated_bloc.dart';
import 'package:just_audio/just_audio.dart';
export 'package:just_audio/just_audio.dart' show LoopMode;

part 'apb_player_event.dart';

part 'apb_player_state.dart';

class ApbPlayerBloc extends HydratedBloc<ApbPlayerEvent, ApbPlayerState> {
  final ApbPlaylistProvider playlistProvider;
  final ApbAudioProvider audioProvider;
  final ApbAudioPlayerHandler _audioPlayerService = ApbAudioPlayerHandler();

  ApbPlayerBloc({required this.playlistProvider, required this.audioProvider})
    : super(const ApbPlayerState(status: ApbPlayerStateStatus.idle)) {
    on<ApbPlayPlaylistEvent>(_onPlayPlaylist);
    on<ApbPlayAudioEvent>(_onPlayAudio);
    on<ApbPauseEvent>(_onPause);
    on<ApbResumeEvent>(_onResume);
    on<ApbStopPlayerEvent>(_onStop);
    on<ApbSeekEvent>(_onSeek);
    on<ApbSkipEvent>(_onSkip);
    on<ApbNextEvent>(_onNext);
    on<ApbPrevEvent>(_onPrev);
    on<ApbToggleSpeedEvent>(_onToggleSpeed);
    on<ApbToggleLoopEvent>(_onToggleLoop);
    on<ApbReplayEvent>(_onReplay);
    on<ApbToggleShuffleEvent>(_onToggleShuffle);
    on<ApbInitStartUpEvent>(_onInitStartUp);
    on<ApbAddAudioEvent>(_onAddAudio);

    add(ApbInitStartUpEvent());
  }

  Future<void> _onAddAudio(ApbAddAudioEvent event, Emitter<ApbPlayerState> emit) async {
    await _audioPlayerService.insertAudio(event.audio);
    emit(state.copyWith(playlist: state.playlist?.copyWith(audios: _audioPlayerService.playlist)));
  }

  Future<void> _onInitStartUp(
    ApbInitStartUpEvent event,
    Emitter<ApbPlayerState> emit,
  ) async {
    final lastPlayedAudio = await audioProvider.getLastPlayed();
    if (lastPlayedAudio != null) {
      emit(state.copyWith(status: ApbPlayerStateStatus.startUp, initialAudio: lastPlayedAudio));

    }
  }

  Future<void> _onToggleShuffle(
    ApbToggleShuffleEvent event,
    Emitter<ApbPlayerState> emit,
  ) async {
    final currentShuffleMode =
        _audioPlayerService.audioPlayer!.shuffleModeEnabled;
    await _audioPlayerService.audioPlayer!.setShuffleModeEnabled(
      !currentShuffleMode,
    );
    emit(state.copyWith(shuffleModeEnabled: !currentShuffleMode));
  }

  Future<void> _onPlayPlaylist(
    ApbPlayPlaylistEvent event,
    Emitter<ApbPlayerState> emit,
  ) async {
    await _handlePlay(emit, playlist: event.playlist);
  }

  Future<void> _onPlayAudio(
    ApbPlayAudioEvent event,
    Emitter<ApbPlayerState> emit,
  ) async {
    await _handlePlay(emit, audio: event.audio);
  }

  Future<void> _handlePlay(
    Emitter<ApbPlayerState> emit, {
    ApbPlayableAudio? audio,
    ApbPlayablePlaylist? playlist,
  }) async {
    try {
      await _audioPlayerService.init();
      _audioPlayerService.audioPlayer!.setShuffleModeEnabled(state.shuffleModeEnabled);
      _audioPlayerService.audioPlayer!.setLoopMode(state.loopMode);
      _audioPlayerService.audioPlayer!.setSpeed(state.speed);

      final playerStream = _audioPlayerService.psStream!;
      ApbPlayableAudio? selectedAudio;
      ApbPlayablePlaylist? selectedPlaylist;
      List<ApbPlayableAudio> tracks = [];
      int? trackIndex;
      if (audio != null) {
        selectedAudio = audio;
        selectedPlaylist = await playlistProvider.get(
          selectedAudio.playlistId!,
        );
        emit(
          state.copyWith(
            playerStream: playerStream,
            initialAudio: selectedAudio,
            playlist: selectedPlaylist,
            status: ApbPlayerStateStatus.loading,
          ),
        );
        tracks = selectedPlaylist.audios ?? [];
      } else if (playlist != null) {
        selectedAudio = playlist.audios![0];
        selectedPlaylist = playlist;
        emit(
          state.copyWith(
            playerStream: playerStream,
            initialAudio: selectedAudio,
            playlist: selectedPlaylist,
            status: ApbPlayerStateStatus.loading,
          ),
        );
        tracks = selectedPlaylist.audios ?? [];
      }
      trackIndex = tracks.indexWhere(
        (element) => element.id == selectedAudio!.id,
      );
      await _audioPlayerService.initPlaylist(audios: tracks);
      Duration initialPos = selectedAudio!.position ?? Duration.zero;
      if (initialPos.inSeconds + 10 >=
          (selectedAudio.duration?.inSeconds ?? 0)) {
        initialPos = Duration.zero;
      }
      await _audioPlayerService.audioPlayer!.setAudioSources(
        _audioPlayerService.audioSources,
        initialIndex: trackIndex,
        initialPosition: initialPos,
      );

      _audioPlayerService.audioPlayer!.play();
      emit(
        state.copyWith(
          initialAudio: selectedAudio,
          playerStream: playerStream,
          playlist: selectedPlaylist,
          status: ApbPlayerStateStatus.playing,
        ),
      );
    } catch (e) {
      if (kDebugMode) {
        rethrow;
      } else {
        add(ApbStopPlayerEvent());
      }
    }
  }

  Future<void> _onPause(
    ApbPauseEvent event,
    Emitter<ApbPlayerState> emit,
  ) async {
    await _audioPlayerService.audioPlayer!.pause();
  }

  Future<void> _onResume(
    ApbResumeEvent event,
    Emitter<ApbPlayerState> emit,
  ) async {
    await _audioPlayerService.audioPlayer!.play();
  }

  Future<void> _onStop(
    ApbStopPlayerEvent event,
    Emitter<ApbPlayerState> emit,
  ) async {
    await _audioPlayerService.dispose();
    emit(state.copyWith(status: ApbPlayerStateStatus.stopped));
  }

  Future<void> _onSeek(ApbSeekEvent event, Emitter<ApbPlayerState> emit) async {
    await _audioPlayerService.audioPlayer!.seek(event.position);
  }

  Future<void> _onSkip(ApbSkipEvent event, Emitter<ApbPlayerState> emit) async {
    Duration audioDuration = event.duration;
    Duration skipPos = event.position + event.skipDuration;
    if (skipPos < audioDuration && skipPos > const Duration(seconds: 0)) {
      await _audioPlayerService.audioPlayer!.seek(skipPos);
    } else if (skipPos > audioDuration) {
      await _audioPlayerService.audioPlayer!.seek(audioDuration);
    } else {
      await _audioPlayerService.audioPlayer!.seek(const Duration(seconds: 0));
    }
  }

  Future<void> _onNext(ApbNextEvent event, Emitter<ApbPlayerState> emit) async {
    await _audioPlayerService.audioPlayer!.seekToNext();
  }

  Future<void> _onPrev(ApbPrevEvent event, Emitter<ApbPlayerState> emit) async {
    await _audioPlayerService.audioPlayer!.seekToPrevious();
  }

  Future<void> _onToggleSpeed(
    ApbToggleSpeedEvent event,
    Emitter<ApbPlayerState> emit,
  ) async {
    await _audioPlayerService.audioPlayer!.setSpeed(event.speed);
    emit(state.copyWith(speed: event.speed));
  }

  Future<void> _onToggleLoop(
    ApbToggleLoopEvent event,
    Emitter<ApbPlayerState> emit,
  ) async {
    await _audioPlayerService.audioPlayer!.setLoopMode(event.loopMode);
    emit(state.copyWith(loopMode: event.loopMode));
  }

  Future<void> _onReplay(
    ApbReplayEvent event,
    Emitter<ApbPlayerState> emit,
  ) async {
    await _audioPlayerService.audioPlayer!.seek(
      const Duration(seconds: 0),
      index: 0,
    );
  }

  @override
  ApbPlayerState? fromJson(Map<String, dynamic> json) {
    try {
      final loopModeIndex = json['loopMode'] as int;
      return ApbPlayerState(
        shuffleModeEnabled: json['shuffleModeEnabled'] as bool,
        loopMode: LoopMode.values[loopModeIndex],
        speed: json['speed'] as double,
      );
    } catch (e) {
      if (kDebugMode) {
        rethrow;
      } else {
        return ApbPlayerState(status: ApbPlayerStateStatus.error);
      }
    }
  }

  @override
  Map<String, dynamic>? toJson(ApbPlayerState state) {
    try {
      return {
        'shuffleModeEnabled': state.shuffleModeEnabled,
        'loopMode': state.loopMode.index,
        'speed': state.speed,
      };

    } catch (e) {
      return null;
    }
  }
}
